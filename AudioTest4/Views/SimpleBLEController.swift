//
//  SimpleBLEController.swift
//  AudioTest4
//
//  Created by Perry Fraser on 1/9/17.
//  Copyright Â© 2017 Scott Fraser. All rights reserved.
//

import CoreLocation
import UIKit
import SwiftyJSON
import Alamofire

// the following UUID's were generated by Scott on 1/15/2017 using https://www.uuidgenerator.net
let uuid1 = "57ee374b-4369-47de-bf34-ed42cb45dbe8"
let uuid2 = "d3830e87-9b71-4797-af49-f16e754dc44b"
let uuid3 = "eff06ca8-ec39-4d22-9aed-418d60b16239"
let uuid4 = "39f326bb-7a23-42a7-9a1d-fd4a8da16f0e"
let uuid5 = "681879d3-9ea2-409d-a14e-22dc6992f4aa"

// NOTE: This app no longer loads the JSON from a hard coded string! It now is loading it from S3
//let jsonManifest = "{\"soundsOfSelf\":[{ \"beaconAlias\":\"test beacon1\", \"beaconUuid\":\"57ee374b-4369-47de-bf34-ed42cb45dbe8\", \"major\": 1234, \"minor\": 5678, \"soundName\": \"m21-Test1\", \"soundUrl\": null, \"panning\": -0.5, \"gain\": 0  }, { \"beaconAlias\":\"test beacon2\", \"beaconUuid\":\"d3830e87-9b71-4797-af49-f16e754dc44b\", \"major\": 1234, \"minor\": 5678, \"soundName\": \"m21-Test2\", \"soundUrl\": null, \"panning\": 0.5, \"gain\": 0  } ]}"

class SimpleBLEController: UIViewController {
    
    let locationManager = CLLocationManager()
    
    let soundPlayer = SOSSoundEngine()
    
    var mapBeaconInfo = [String: BeaconInfo]()
    
    @IBOutlet weak var bleInfoLabelOut: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()

        
        bleInfoLabelOut.numberOfLines = 4
        bleInfoLabelOut.lineBreakMode = NSLineBreakMode.byWordWrapping
        
        // Do any additional setup after loading the view.
        locationManager.requestWhenInUseAuthorization()
        locationManager.delegate = self
        
        // just for testing - hard coded start of monitoring a beacon
//        startMonitoringItem(item: BeaconInfo(name: "test beacon1",
//            uuid: UUID( uuidString: uuid1)!,
//            majorValue: 1234,
//            minorValue: 5678,
//            sound: "m21-Test1",
//            panning: -0.5))
//
//        startMonitoringItem(item: BeaconInfo(name: "test beacon2",
//            uuid: UUID( uuidString: uuid2)!,
//            majorValue: 1234,
//            minorValue: 5678,
//            sound: "m21-Test2",
//            panning: 0.5 ))
        
        // let's try and load the JSON from the intarnets!!!
        //let configuration = URLSessionConfiguration.ephemeral
        //configuration.urlCache?.removeAllCachedResponses()
        //let sessionManager = Alamofire.SessionManager(configuration: configuration)
        
        URLCache.shared.removeAllCachedResponses()
        Alamofire.request("http://s3.amazonaws.com/sfraser/ExampleSosManifest.json")
            .validate(statusCode: 200..<300)
            .validate(contentType: ["application/json"])
            .responseString { response in

                switch response.result {
                case .success:
                    // convert string to JSON - based on examples from https://github.com/SwiftyJSON/SwiftyJSON
                    if let dataFromString = response.result.value?.data(using: .utf8, allowLossyConversion: false) {
                        
                        let json = JSON(data: dataFromString)
                        
                        // loop through all the beacons defined in the JSON and start monitoring for them
                        if json["soundsOfSelf"].exists() {
                        
                            for (_,beaconJson):(String, JSON) in json["soundsOfSelf"] {
                                
                                self.startMonitoringItem(item: BeaconInfo(name: beaconJson["beaconAlias"].stringValue,
                                                                          uuid: UUID( uuidString: beaconJson["beaconUuid"].stringValue)!,
                                                                          majorValue: CLBeaconMajorValue(beaconJson["major"].intValue),
                                                                          minorValue: CLBeaconMinorValue(beaconJson["minor"].intValue),
                                                                          sound: beaconJson["soundName"].stringValue,
                                                                          panning: beaconJson["pan"].floatValue))
                                
                            }
                        }
                        else {
                            self.BleLog( "Failed to parse JSON: \(response.result.value)" )
                        }
                    }
                    else {
                        self.BleLog( "Failed to read JSON: \(response.result.value)" )
                    }
                case .failure(let error):
                    self.BleLog("Failed to load SOS Manifest: \(error)")
                }
                
        }
        
}
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
    
    func BleLog(_ msg: String) {
        bleInfoLabelOut.text = msg
    }
    
}

extension SimpleBLEController : CLLocationManagerDelegate {
    
    private func beaconRegionWithItem(item:BeaconInfo) -> CLBeaconRegion {
        let beaconRegion = CLBeaconRegion(proximityUUID: item.uuid,
                                          //major: item.majorValue,
            //minor: item.minorValue,
            identifier: item.name)
        return beaconRegion
    }
    
    func startMonitoringItem(item: BeaconInfo) {
        let beaconRegion = beaconRegionWithItem(item: item)
        locationManager.startMonitoring(for: beaconRegion)
        locationManager.startRangingBeacons(in: beaconRegion)
        mapBeaconInfo[item.uuid.uuidString] = item
        BleLog( "Started Monitoring!!!" )
    }
    
    func stopMonitoringItem(item: BeaconInfo) {
        let beaconRegion = beaconRegionWithItem(item: item)
        locationManager.stopMonitoring(for: beaconRegion)
        locationManager.stopRangingBeacons(in: beaconRegion)
        mapBeaconInfo.removeValue(forKey: item.uuid.uuidString)
        BleLog( "STOPPED Monitoring!" )
    }
    
    func locationManager(_ manager: CLLocationManager, monitoringDidFailFor region: CLRegion?, withError error: Error) {
        BleLog( "Failed monitoring region \(region?.identifier): \(error.localizedDescription)" )
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        BleLog("Location manager failed: \(error.localizedDescription)")
    }
    
    func locationManager(_ manager: CLLocationManager, didRangeBeacons beacons: [CLBeacon], in region: CLBeaconRegion) {
        // print(">>> didRangeBeacons in \(region.proximityUUID)")
        
        do {
            if (beacons.isEmpty) {
                // BleLog("No Beacons nearby")
                // soundPlayer.silenceAllSounds()
                try soundPlayer.playSound(named: (mapBeaconInfo[region.proximityUUID.uuidString]?.sound)!, atVolume: 0 )
            }
            else {
                for rangedBeacon in beacons {
                    
                    BleLog("FOUND BEACON: \(rangedBeacon.proximityUUID) \(nameForProximity(proximity: rangedBeacon.proximity)) rssi:\(rangedBeacon.rssi))")
                    
                    //soundPlayer.playSound(named: "m21-Test1", atVolume: volumeForProximity(proximity: beacon.proximity))
                    
                    let beaconInfo = mapBeaconInfo[rangedBeacon.proximityUUID.uuidString]
                    
                    if(rangedBeacon.proximity == CLProximity.unknown) {
                        try soundPlayer.playSound(named: (beaconInfo?.sound)!, atVolume: 0, panned: (beaconInfo?.pan)!)
                    }
                    else if(rangedBeacon.proximity == CLProximity.immediate) {
                        try soundPlayer.playSound(named: (beaconInfo?.sound)!, atVolume: 1.0, panned: (beaconInfo?.pan)!)
                    }
                    else {
                        try soundPlayer.playSound(named: (beaconInfo?.sound)!, atVolume: (1 - (Float(-rangedBeacon.rssi)/100)), panned: (beaconInfo?.pan)! )
                    }
                }
            }
        } catch SOSError.fileAssetNotFound(let fileName){
            print("Could not find file " + fileName)
        } catch {
            print("Unknown error")
        }
        
    }

    
}

func ==(item: BeaconInfo, beacon: CLBeacon) -> Bool {
    return ((beacon.proximityUUID.uuidString == item.uuid.uuidString)
        && (Int(beacon.major) == Int(item.majorValue))
        && (Int(beacon.minor) == Int(item.minorValue)))
}

func nameForProximity(proximity: CLProximity) -> String {
    switch proximity {
    case .unknown:
        return "Unknown"
    case .immediate:
        return "Immediate"
    case .near:
        return "Near"
    case .far:
        return "Far"
    }
}

func volumeForProximity(proximity: CLProximity) -> Float {
    switch proximity {
    case .unknown:
        return 0
    case .immediate:
        return 1
    case .near:
        return 0.6
    case .far:
        return 0.1
    }
}

